// Code generated by MockGen. DO NOT EDIT.
// Source: controllers/controller.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	clientv3 "go.etcd.io/etcd/client/v3"
)

// MockEtcdClient is a mock of EtcdClient interface.
type MockEtcdClient struct {
	ctrl     *gomock.Controller
	recorder *MockEtcdClientMockRecorder
}

// MockEtcdClientMockRecorder is the mock recorder for MockEtcdClient.
type MockEtcdClientMockRecorder struct {
	mock *MockEtcdClient
}

// NewMockEtcdClient creates a new mock instance.
func NewMockEtcdClient(ctrl *gomock.Controller) *MockEtcdClient {
	mock := &MockEtcdClient{ctrl: ctrl}
	mock.recorder = &MockEtcdClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEtcdClient) EXPECT() *MockEtcdClientMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockEtcdClient) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockEtcdClientMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockEtcdClient)(nil).Close))
}

// MemberList mocks base method.
func (m *MockEtcdClient) MemberList(ctx context.Context) (*clientv3.MemberListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MemberList", ctx)
	ret0, _ := ret[0].(*clientv3.MemberListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MemberList indicates an expected call of MemberList.
func (mr *MockEtcdClientMockRecorder) MemberList(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MemberList", reflect.TypeOf((*MockEtcdClient)(nil).MemberList), ctx)
}

// MemberRemove mocks base method.
func (m *MockEtcdClient) MemberRemove(ctx context.Context, id uint64) (*clientv3.MemberRemoveResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MemberRemove", ctx, id)
	ret0, _ := ret[0].(*clientv3.MemberRemoveResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MemberRemove indicates an expected call of MemberRemove.
func (mr *MockEtcdClientMockRecorder) MemberRemove(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MemberRemove", reflect.TypeOf((*MockEtcdClient)(nil).MemberRemove), ctx, id)
}
